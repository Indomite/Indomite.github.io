(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{454:function(v,_,t){"use strict";t.r(_);var s=t(0),i=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"前端安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前端安全"}},[v._v("#")]),v._v(" 前端安全")]),v._v(" "),_("h3",{attrs:{id:"xss"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[v._v("#")]),v._v(" XSS")]),v._v(" "),_("p",[v._v("跨站基本攻击，发生在目标用户浏览器层面上。攻击者企图将可执行的代码注入到网页中")]),v._v(" "),_("p",[_("strong",[v._v("防御")])]),v._v(" "),_("ol",[_("li",[v._v("escape 转义字符，对输入的引号，尖括号，斜杠进行转义")]),v._v(" "),_("li",[v._v("CSP内容安全策略，建立白名单，明确告诉浏览器哪些外部资源可以加载和执行\n"),_("ul",[_("li",[v._v("设置HTTP Header的"),_("code",[v._v("Content-security-Policy")])]),v._v(" "),_("li",[v._v("或者设置meta标签的"),_("code",[v._v('meta-http-equiv="Content-security-Policy"')])])])]),v._v(" "),_("li",[v._v("私密cookie增加httpOnly（执行意外的脚本意味着网页所有内容都可被获取，甚至转发，cookie如果保存用户信息数据的东西尽量不让前端随意访问）")])]),v._v(" "),_("blockquote",[_("p",[v._v("xss防御核心：对任何不可信任的数据不要渲染，即使渲染也要先转义")])]),v._v(" "),_("h3",{attrs:{id:"csrf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[v._v("#")]),v._v(" CSRF")]),v._v(" "),_("p",[v._v("跨站请求伪造")]),v._v(" "),_("p",[v._v("要完成一次CSRF攻击，受害者必须依次完成两个步骤：")]),v._v(" "),_("p",[v._v("1.登录受信任网站A，并在本地生成Cookie")]),v._v(" "),_("p",[v._v("2.受害者访问危险网站B， 网站B中发送请求给网站A，请求会自动带上Cookie")]),v._v(" "),_("p",[_("strong",[v._v("防御")])]),v._v(" "),_("ol",[_("li",[v._v("GET请求不对数据进行修改")]),v._v(" "),_("li",[v._v("不让第三方访问cookie（SameSite: strict）")]),v._v(" "),_("li",[v._v("组织第三方访问（通过Referer头部）")]),v._v(" "),_("li",[v._v("请求附带信息，Token")])]),v._v(" "),_("h3",{attrs:{id:"点击劫持"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#点击劫持"}},[v._v("#")]),v._v(" 点击劫持")]),v._v(" "),_("p",[v._v("通过iframe内嵌攻击网站的网页，"),_("strong",[v._v("诱导用户点击触发攻击")]),v._v("（点击的一瞬间可以执行xss或者csrf，但这里不是点击劫持的范畴）")]),v._v(" "),_("p",[_("strong",[v._v("防御")])]),v._v(" "),_("ul",[_("li",[v._v("X-FRAME-OPTIONS\n"),_("ul",[_("li",[v._v("DENY 阻止")]),v._v(" "),_("li",[v._v("SAME-ORIGIN 同源")]),v._v(" "),_("li",[v._v("ALLOW-FROM 数组或者单个值")])])]),v._v(" "),_("li",[v._v("js实现 window.top !== window.self")])]),v._v(" "),_("h3",{attrs:{id:"中间人攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[v._v("#")]),v._v(" 中间人攻击")]),v._v(" "),_("p",[v._v("同时和服务端和客户端建立连接，让对方认为这是安全的")]),v._v(" "),_("ol",[_("li",[v._v("本地请求被劫持（如DNS劫持等），所有请求均发送到中间人的服务器")]),v._v(" "),_("li",[v._v("中间人服务器返回中间人自己的证书")]),v._v(" "),_("li",[v._v("客户端创建随机数，通过中间人证书的公钥对随机数加密后传送给中间人，然后凭随机数构造对称加密对传输内容进行加密传输")]),v._v(" "),_("li",[v._v("中间人因为拥有客户端的随机数，可以通过对称加密算法进行内容解密")]),v._v(" "),_("li",[v._v("中间人以客户端的请求内容再向正规网站发起请求")]),v._v(" "),_("li",[v._v("因为中间人与服务器的通信过程是合法的，正规网站通过建立的安全通道返回加密后的数据")]),v._v(" "),_("li",[v._v("中间人凭借与正规网站建立的对称加密算法对内容进行解密")]),v._v(" "),_("li",[v._v("中间人通过与客户端建立的对称加密算法对正规内容返回的数据进行加密传输")]),v._v(" "),_("li",[v._v("客户端通过与中间人建立的对称加密算法对返回结果数据进行解密")])]),v._v(" "),_("h3",{attrs:{id:"加密"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#加密"}},[v._v("#")]),v._v(" 加密")]),v._v(" "),_("ul",[_("li",[v._v("对称加密：通信双方使用的密钥是完全相同的，密钥既可以把明文加密成密文，也可以把密文解密成明文。（DES, 3DES, AES）")]),v._v(" "),_("li",[v._v("非对称加密：使用的密钥对是一个公钥一个私钥。公钥可以把明文加密成密文，而私钥则是把密文解密成明文。私钥是不能被其他人知道的，而公钥即使第三方拿到了也没有问题。因为最终完成解密的私钥只在你手上，别人只能加密而无法查看密文的内容。（RSA）")])])])}),[],!1,null,null,null);_.default=i.exports}}]);