(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{471:function(v,_,t){"use strict";t.r(_);var s=t(0),r=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"操作系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[v._v("#")]),v._v(" 操作系统")]),v._v(" "),_("h3",{attrs:{id:"线程与进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程"}},[v._v("#")]),v._v(" 线程与进程")]),v._v(" "),_("p",[_("strong",[v._v("进程（Process）")]),v._v(" 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。 在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。")]),v._v(" "),_("p",[_("strong",[v._v("线程（thread）")]),v._v(" 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。")]),v._v(" "),_("p",[_("strong",[v._v("总结")])]),v._v(" "),_("p",[v._v("进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程——资源分配的最小单位。")]),v._v(" "),_("p",[v._v("线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。线程——程序执行的最小单位。")]),v._v(" "),_("h3",{attrs:{id:"进程间的通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程间的通信"}},[v._v("#")]),v._v(" 进程间的通信")]),v._v(" "),_("p",[v._v("每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为"),_("strong",[v._v("进程间通信（IPC，InterProcess Communication）")])]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("管道/匿名管道(pipe)")])]),v._v(" "),_("p",[v._v("管道的实质是一个内核缓冲区，进程以先进先出的方式从缓冲区存取数据，管道一端的进程顺序的将数据写入缓冲区，另一端的进程则顺序的读出数据。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("有名管道(FIFO)")])]),v._v(" "),_("p",[v._v("有名管道不同于匿名管道之处在于它提供了一个路径名与之关联，"),_("strong",[v._v("以有名管道的文件形式存在于文件系统中")]),v._v("，因此，通过有名管道不相关的进程也能交换数据。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("信号(Signal)")])]),v._v(" "),_("p",[v._v("信号是Linux系统中用于进程间互相通信或者操作的一种机制，信号可以在任何时候发给某一进程，而无需知道该进程的状态。如果该进程当前并未处于执行状态，则该信号就有内核保存起来，知道该进程回复执行并传递给它为止。如果一个信号被进程设置为阻塞，则该信号的传递被延迟，直到其阻塞被取消是才被传递给进程。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("消息(Message)队列")])]),v._v(" "),_("p",[v._v("消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识.只有在内核重启(即，操作系统重启)或者显示地删除一个消息队列时，该消息队列才会被真正的删除。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("共享内存(share memory)")])]),v._v(" "),_("p",[v._v("为了在多个进程间交换信息，内核专门留出了一块内存区，可以由需要访问的进程将其映射到自己的私有地址空间。进程就可以直接读写这一块内存而不需要进行数据的拷贝，从而大大提高效率。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("信号量(semaphore)")])]),v._v(" "),_("p",[v._v("信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。其中进行PV操作")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("套接字(socket)")])]),v._v(" "),_("p",[v._v("套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）系统的开发工作既可以在本地单机上进行，也可以跨网络进行。也就是说它可以让不在同一台计算机但通过网络连接计算机上的进程进行通信。")])])]),v._v(" "),_("h3",{attrs:{id:"进程调度策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程调度策略"}},[v._v("#")]),v._v(" 进程调度策略")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("先来先服务FCFS")])]),v._v(" "),_("li",[_("p",[v._v("短进程调度优先SPF")])]),v._v(" "),_("li",[_("p",[v._v("高优先权先调度")]),v._v(" "),_("ul",[_("li",[v._v("非抢占式优先")]),v._v(" "),_("li",[v._v("抢占式优先")])])]),v._v(" "),_("li",[_("p",[v._v("高响应比优先")])]),v._v(" "),_("li",[_("p",[v._v("时间片轮转")])])]),v._v(" "),_("h3",{attrs:{id:"死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[v._v("#")]),v._v(" 死锁")]),v._v(" "),_("p",[v._v("当线程A持有独占锁a，并尝试去获取独占锁b的同时，线程B持有独占锁b，并尝试获取独占锁a的情况下，就会发生AB两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。")]),v._v(" "),_("p",[v._v("造成死锁必须达成的4个条件（原因）：")]),v._v(" "),_("ol",[_("li",[v._v("互斥条件：一个资源每次只能被一个线程使用。")]),v._v(" "),_("li",[v._v("请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。")]),v._v(" "),_("li",[v._v("不剥夺条件：线程已获得的资源，在未使用完之前，不能强行剥夺。")]),v._v(" "),_("li",[v._v("循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);